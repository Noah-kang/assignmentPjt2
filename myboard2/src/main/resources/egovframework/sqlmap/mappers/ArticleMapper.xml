<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="egovframework.mapper.ArticleMapper">
	<!-- 게시글 등록 -->
	<insert id="insertArticle"
		parameterType="egovframework.vo.ArticleVO" useGeneratedKeys="true"
		keyProperty="articleId">
		INSERT INTO article (
		member_id,
		title,
		content,
		view_count,
		is_deleted,
		created_at,
		updated_at
		) VALUES (
		#{memberId},
		#{title},
		#{content},
		0,
		FALSE,
		NOW(),
		NOW()
		) RETURNING article_id
	</insert>

	<!-- 게시글 목록 조회 -->
	<select id="getArticles" resultMap="ArticleWithThumbnailMap">
		SELECT
		a.article_id AS articleId,
		a.member_id AS memberId,
		a.title,
		a.content,
		a.view_count AS viewCount,
		a.is_deleted AS isDeleted,
		a.created_at AS createdAt,
		a.updated_at AS updatedAt,
		p.photo_id AS
		photoId,
		p.file_path AS filePath,
		p.is_thumbnail AS isThumbnail
		FROM
		article a
		LEFT JOIN photo p ON a.article_id = p.article_id AND
		p.is_thumbnail = TRUE
		WHERE a.is_deleted = FALSE
		<if test="searchType != null and keyword != null">
			<choose>
				<when test="searchType == 'title'">
					AND a.title LIKE CONCAT('%', #{keyword}, '%')
				</when>
				<when test="searchType == 'writer'">
					AND a.member_id LIKE CONCAT('%', #{keyword}, '%')
				</when>
			</choose>
		</if>
		ORDER BY a.created_at DESC
		LIMIT #{size} OFFSET #{offset}
	</select>

	<resultMap id="ArticleWithThumbnailMap"
		type="egovframework.vo.ArticleVO">
		<id property="articleId" column="articleId" />
		<result property="memberId" column="memberId" />
		<result property="title" column="title" />
		<result property="content" column="content" />
		<result property="viewCount" column="viewCount" />
		<result property="isDeleted" column="isDeleted" />
		<result property="createdAt" column="createdAt" />
		<result property="updatedAt" column="updatedAt" />
		<!-- thumbnail은 이제 filePath를 직접 매핑 -->
		<result property="thumbnail" column="filePath" />
	</resultMap>

	<!-- 총 게시글 수 조회 -->
	<select id="getTotalArticleCount" resultType="int">
		SELECT COUNT(*)
		FROM article
		WHERE is_deleted = FALSE
		<if test="searchType != null and keyword != null">
			<choose>
				<when test="searchType == 'title'">
					AND title LIKE CONCAT('%', #{keyword}, '%')
				</when>
				<when test="searchType == 'writer'">
					AND member_id LIKE CONCAT('%', #{keyword}, '%')
				</when>
			</choose>
		</if>
	</select>

	<!-- 조회수 증가 -->
	<update id="incrementViewCount" parameterType="int">
		UPDATE article
		SET
		view_count = view_count + 1
		WHERE article_id = #{articleId}
	</update>

	<!-- 게시글 상세조회 -->
	<select id="getArticleById" parameterType="int"
		resultMap="ArticleWithPhotosMap">
		SELECT
		a.article_id AS articleId,
		a.member_id AS memberId,
		a.title,
		a.content,
		a.view_count AS viewCount,
		a.is_deleted AS isDeleted,
		a.created_at AS createdAt,
		a.updated_at AS updatedAt,
		p.photo_id AS photoId,
		p.file_name AS fileName,
		p.file_path AS filePath,
		p.is_thumbnail AS isThumbnail
		FROM article a
		LEFT JOIN photo p ON a.article_id = p.article_id AND p.is_deleted = false
		WHERE a.article_id = #{articleId} AND a.is_deleted = FALSE
	</select>

	<resultMap id="ArticleWithPhotosMap"
		type="egovframework.vo.ArticleVO">
		<id property="articleId" column="articleId" />
		<result property="memberId" column="memberId" />
		<result property="title" column="title" />
		<result property="content" column="content" />
		<result property="viewCount" column="viewCount" />
		<result property="isDeleted" column="isDeleted" />
		<result property="createdAt" column="createdAt" />
		<result property="updatedAt" column="updatedAt" />

		<!-- PhotoVO 리스트와 매핑 -->
		<collection property="photos"
			ofType="egovframework.vo.PhotoVO">
			<id property="photoId" column="photoId" />
			<result property="fileName" column="fileName" />
			<result property="filePath" column="filePath" />
			<result property="isThumbnail" column="isThumbnail" />
		</collection>
	</resultMap>

	<!-- 게시글 수정 -->
	<update id="updateArticle"
		parameterType="egovframework.vo.ArticleVO">
		UPDATE article
		SET title = #{title},
		content = #{content},
		updated_at = NOW()
		WHERE article_id = #{articleId}
	</update>

	<!-- 게시글 삭제 -->
	<update id="softDeleteArticle" parameterType="int">
        UPDATE article
           SET is_deleted = true
         WHERE article_id = #{articleId}
    </update>

</mapper>
